
* Installation

* Compiling and Loading CFFI

* Tutorial

* Foreign Types

* Working with Foreign Pointers

** Basic Pointer Operations

The exact nature of a pointer object is implementation-specific.  The
following functions are provided for accessing pointer objects:

Function: POINTERP object

 Return true if OBJECT is a pointer.

Function: NULL-PTR

 Returns a null pointer.

Function: NULL-PTR-P ptr

 Return true if PTR is a null pointer.

** Allocating Foreign Memory

Function: FOREIGN-ALLOC size

 Allocate SIZE bytes of foreign memory and return a pointer object
 pointing at the memory.  An error will be signalled if the memory
 cannot be allocated.  The memory must be released with FOREIGN-FREE
 when no longer needed.

Function: FOREIGN-FREE ptr

 Free a block of memory allocated with FOREIGN-ALLOC.

Macro: WITH-FOREIGN-PTR (var size &optional size-var) &body body

 Binds VAR to a pointer to SIZE bytes of foreign memory during the
 evaluation of BODY.  The pointer has dynamic extent and may be
 stack allocated if supported by the implementation.

 If SIZE-VAR is supplied, it will be bound to SIZE.  This is useful
 when SIZE is a complex expression as it avoids multiple evaluation
 when the buffer size is needed in BODY.

 Implementation Notes: SBCL will stack-allocate when SIZE is constant
 at macroexpansion time.  In OpenMCL the memory is stack allocated.

** Accessing Foreign Memory

Accessor: MEM-REF ptr type &optional (offset 0)

Accessor: FOREIGN-AREF ptr type index

* Accessing Foreign Strings

* Calling Foreign Functions

* Loading Foreign Libraries

