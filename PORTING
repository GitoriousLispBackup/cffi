
Porting CFFI to other Lisp implementations (incomplete):

- Create a cffi-otherlisp.lisp source file to contain the platform
  specific functions you are about to add.

- Functions you must define in CFFI-SYS:

  Function: FOREIGN-ALLOC size

    Allocate SIZE bytes of memory and return a foreign pointer.

  Function: FOREIGN-FREE ptr

    Free memory allocated by FOREIGN-ALLOC.

  Macro: WITH-FOREIGN-PTR (var size &optional size-var) &body body

    Bind VAR to SIZE bytes of stack-consed memory during BODY.  If the
    implementation cannot support stack allocation, the macro may
    allocate the memory on the heap using FOREIGN-ALLOC /
    FOREIGN-FREE.  If SIZE-VAR is supplied it will be bound to SIZE.

  Function: NULL-PTR

    Return a null pointer.

  Function: NULL-PTR-P ptr

    Return true if PTR is a null pointer.

  Accessor: MEM-REF-U8 ptr &optional (offset 0)
  Accessor: MEM-REF-S8 ptr &optional (offset 0)
  Accessor: MEM-REF-U16 ptr &optional (offset 0)
  Accessor: MEM-REF-S16 ptr &optional (offset 0)
  Accessor: MEM-REF-U32 ptr &optional (offset 0)
  Accessor: MEM-REF-S32 ptr &optional (offset 0)
  Accessor: MEM-REF-FLOAT ptr &optional (offset 0)
  Accessor: MEM-REF-DOUBLE ptr &optional (offset 0)
  Accessor: MEM-REF-PTR ptr &optional (offset 0)

    Low-level functions for dereferencing a pointer to various
    primitive foreign types.

  Macro: %FOREIGN-FUNCALL function-name &rest args

